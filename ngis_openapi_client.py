# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NgisOpenApiClient
                                 A QGIS plugin
 Plugin for nedlasting av data fra NGIS OpenAPI
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Norconsult Informasjonssystemer AS
        email                : post@nois.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTextCodec
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    QgsProject,
    QgsPathResolver,
    QgsVectorLayer,
    QgsOgcUtils,
    QgsFeature,
    QgsJsonUtils,
    QgsWkbTypes
)

import json
from .login import NgisOpenApiClientAuthentication
from .http_client import NgisHttpClient

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ngis_openapi_client_dialog import NgisOpenApiClientDialog
import os.path


class NgisOpenApiClient:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NgisOpenApiClient_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&NGIS OpenAPI Client')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NgisOpenApiClient', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ngis_openapi_client/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'NGIS OpenAPI Client'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&NGIS OpenAPI Client'),
                action)
            self.iface.removeToolBarIcon(action)

    def handle_login(self):
        auth = NgisOpenApiClientAuthentication()
        configId = self.dlg.mAuthConfigSelect.configId()
        username, password = auth.getUser(configId)
        if not username:
            self.dlg.statusLabel.setText("Autentisering mislyktes")
            return
        client = NgisHttpClient("https://openapi-test.kartverket.no/v1/", username, password)
        datasets = client.getAvailableDatasets()
        if len(datasets) == 0:
            self.dlg.statusLabel.setText("Kunne ikke hente datasett")
            return
        names = [dataset['name'] for dataset in datasets]
        self.dlg.mComboBox.addItems(names)
        self.dlg.mComboBox.setDefaultText(names[0])
        self.dlg.logInButton.setEnabled(False)
        self.dlg.logOutButton.setEnabled(True)
        self.dlg.addLayerButton.setEnabled(True)
        self.dlg.mAuthConfigSelect.setEnabled(False)
        return

    def handle_logout(self):
        self.dlg.mComboBox.setDefaultText('')
        self.dlg.mComboBox.clear()
        self.dlg.logInButton.setEnabled(True)
        self.dlg.logOutButton.setEnabled(False)
        self.dlg.addLayerButton.setEnabled(False)
        self.dlg.mAuthConfigSelect.setEnabled(True)
    
    def handle_add_layer(self):
        self.create_layer()

    def create_layer(self):
        """Create a new layer by name (rev_lyr)"""

        auth = NgisOpenApiClientAuthentication()
        configId = self.dlg.mAuthConfigSelect.configId()
        username, password = auth.getUser(configId)
        client = NgisHttpClient("https://openapi-test.kartverket.no/v1/", username, password)

        datasets = client.getAvailableDatasets()
        metadata = client.getDatasetMetadata(datasets[0]['id'])
        features = client.getDatasetFeatures(metadata.id, metadata.bbox, metadata.coordinate_reference_system)
        
        features_json = json.dumps(features, ensure_ascii=False) 
        codec = QTextCodec.codecForName("UTF-8")   
        fields = QgsJsonUtils.stringToFields(features_json, codec)
        newFeatures = QgsJsonUtils.stringToFeatureList(features_json, fields, codec)

        geometry_dict = {}
        if newFeatures:   
            for feature in newFeatures:

                featuretype = feature.attribute('featuretype')
                geom_type = feature.geometry()
                geom_type = QgsWkbTypes.displayString(int(geom_type.wkbType()))
                if geom_type not in geometry_dict:
                    geometry_dict[geom_type] = {}
                if featuretype not in geometry_dict[geom_type]:
                    geometry_dict[geom_type][featuretype] = []
                
                geometry_dict[geom_type][featuretype].append(feature)

        for geom_type, feature_types in geometry_dict.items():
            for feature_type, features in feature_types.items():
                lyr = QgsVectorLayer(f'{geom_type}?crs=epsg:4326', f'{feature_type}-{geom_type}', "memory")
                QgsProject.instance().addMapLayer(lyr)
                lyr.startEditing()
                for field in fields:
                    addAttribute = lyr.addAttribute(field)
                # save changes made in 'rev_lyr'
                lyr.commitChanges()

                l_d = lyr.dataProvider()
                l_d.addFeatures(features)
                # update the extent of rev_lyr
                lyr.updateExtents()
                # save changes made in 'rev_lyr'
                lyr.commitChanges()

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        if self.first_start == True:
            self.first_start = False
            self.dlg = NgisOpenApiClientDialog()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        self.dlg.logInButton.clicked.connect(self.handle_login)
        self.dlg.logOutButton.clicked.connect(self.handle_logout)
        self.dlg.addLayerButton.clicked.connect(self.handle_add_layer)
       
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
