# coding: utf-8

"""
    Oppdateringsgrensesnitt for SFKB

    # NGIS-OpenAPI  Grov oversikt over funksjonalitet:   - Hente liste over tilgjengelige datasett    - Hente metadata for et bestemt datasett   - Hente data fra et bestemt datasett     - Med lesetilgang eller skrivetilgang (medfører låsing)       - områdebegrensning       - egenskapsspørring (begrenset i første versjon til bygningsnummer eller lokalid)   - Lagre data til et bestemt datasett     - Operasjoner som håndteres: nytt objekt, endre objekt og slett objekt  ## Generelle prinsipper for systemet  ### Delt geometri  Flater består av avgrensningslinjer som ligger lagret som egne objekter. På den måten kan en linje avgrense ingen, én eller flere flater. Det er likevel slik at flater hentes ut og lagres med egen geometri for å gjøre det enklere å tegne opp datene, men ved endring av (delte) linjer og flater må det tas hensyn til delt geometri. Forsøk på endring av linje eller flate uten tilsvarende endring av evt. delt geometri vil bli avvist av systemet.  ### Låsing  Dette er nærmere beskrevet i de aktuelle kallene.  Foreløpig er det kun `user_lock` som er støttet. Det betyr at data må hentes ut med `user_lock` før de kan sendes inn med endringer.  ### Porsjonering  All uthenting av feature-objekter vil kunne bli porsjonert av serveren, se `limit`-parameteret.   ### Koordinatsystemer og transformasjon  For å sende inn koordinater i uri-spørringen (f.eks med `bbox`-parameteret) må koordinatsystemet angis med `crs_EPSG`-parameteret.  For å hente ut koordinater på annet koordinatsystem enn i dataset'et kan ønsket koordinatsystem angis i `Accept`-headeren med `crs_EPSG`. Se eksempler på dette i kallene.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Dataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'resolution': 'float',
        'coordinate_reference_system': 'str',
        'schema_url': 'str',
        'access': 'str',
        'bbox': 'BoundingBox'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'resolution': 'resolution',
        'coordinate_reference_system': 'coordinate_reference_system',
        'schema_url': 'schema_url',
        'access': 'access',
        'bbox': 'bbox'
    }

    def __init__(self, id=None, name=None, description=None, resolution=None, coordinate_reference_system=None, schema_url=None, access=None, bbox=None, local_vars_configuration=None):  # noqa: E501
        """Dataset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._resolution = None
        self._coordinate_reference_system = None
        self._schema_url = None
        self._access = None
        self._bbox = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if resolution is not None:
            self.resolution = resolution
        if coordinate_reference_system is not None:
            self.coordinate_reference_system = coordinate_reference_system
        if schema_url is not None:
            self.schema_url = schema_url
        if access is not None:
            self.access = access
        if bbox is not None:
            self.bbox = bbox

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501


        :return: The id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501


        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Dataset.  # noqa: E501


        :return: The description of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.


        :param description: The description of this Dataset.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def resolution(self):
        """Gets the resolution of this Dataset.  # noqa: E501


        :return: The resolution of this Dataset.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Dataset.


        :param resolution: The resolution of this Dataset.  # noqa: E501
        :type resolution: float
        """

        self._resolution = resolution

    @property
    def coordinate_reference_system(self):
        """Gets the coordinate_reference_system of this Dataset.  # noqa: E501


        :return: The coordinate_reference_system of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._coordinate_reference_system

    @coordinate_reference_system.setter
    def coordinate_reference_system(self, coordinate_reference_system):
        """Sets the coordinate_reference_system of this Dataset.


        :param coordinate_reference_system: The coordinate_reference_system of this Dataset.  # noqa: E501
        :type coordinate_reference_system: str
        """
        if (self.local_vars_configuration.client_side_validation and
                coordinate_reference_system is not None and not re.search(r'^EPSG:\d+$', coordinate_reference_system)):  # noqa: E501
            raise ValueError(r"Invalid value for `coordinate_reference_system`, must be a follow pattern or equal to `/^EPSG:\d+$/`")  # noqa: E501

        self._coordinate_reference_system = coordinate_reference_system

    @property
    def schema_url(self):
        """Gets the schema_url of this Dataset.  # noqa: E501


        :return: The schema_url of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._schema_url

    @schema_url.setter
    def schema_url(self, schema_url):
        """Sets the schema_url of this Dataset.


        :param schema_url: The schema_url of this Dataset.  # noqa: E501
        :type schema_url: str
        """

        self._schema_url = schema_url

    @property
    def access(self):
        """Gets the access of this Dataset.  # noqa: E501


        :return: The access of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Dataset.


        :param access: The access of this Dataset.  # noqa: E501
        :type access: str
        """
        allowed_values = ["read_only", "read_write"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and access not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"  # noqa: E501
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def bbox(self):
        """Gets the bbox of this Dataset.  # noqa: E501


        :return: The bbox of this Dataset.  # noqa: E501
        :rtype: BoundingBox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Dataset.


        :param bbox: The bbox of this Dataset.  # noqa: E501
        :type bbox: BoundingBox
        """

        self._bbox = bbox

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dataset):
            return True

        return self.to_dict() != other.to_dict()
