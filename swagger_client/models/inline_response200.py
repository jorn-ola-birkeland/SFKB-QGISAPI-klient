# coding: utf-8

"""
    Oppdateringsgrensesnitt for SFKB

    # NGIS-OpenAPI  Grov oversikt over funksjonalitet:   - Hente liste over tilgjengelige datasett    - Hente metadata for et bestemt datasett   - Hente data fra et bestemt datasett     - Med lesetilgang eller skrivetilgang (medfører låsing)       - områdebegrensning       - egenskapsspørring (begrenset i første versjon til bygningsnummer eller lokalid)   - Lagre data til et bestemt datasett     - Operasjoner som håndteres: nytt objekt, endre objekt og slett objekt  ## Generelle prinsipper for systemet  ### Delt geometri  Flater består av avgrensningslinjer som ligger lagret som egne objekter. På den måten kan en linje avgrense ingen, én eller flere flater. Det er likevel slik at flater hentes ut og lagres med egen geometri for å gjøre det enklere å tegne opp datene, men ved endring av (delte) linjer og flater må det tas hensyn til delt geometri. Forsøk på endring av linje eller flate uten tilsvarende endring av evt. delt geometri vil bli avvist av systemet.  ### Låsing  Dette er nærmere beskrevet i de aktuelle kallene.  Foreløpig er det kun `user_lock` som er støttet. Det betyr at data må hentes ut med `user_lock` før de kan sendes inn med endringer.  ### Porsjonering  All uthenting av feature-objekter vil kunne bli porsjonert av serveren, se `limit`-parameteret.   ### Koordinatsystemer og transformasjon  For å sende inn koordinater i uri-spørringen (f.eks med `bbox`-parameteret) må koordinatsystemet angis med `crs_EPSG`-parameteret.  For å hente ut koordinater på annet koordinatsystem enn i dataset'et kan ønsket koordinatsystem angis i `Accept`-headeren med `crs_EPSG`. Se eksempler på dette i kallene.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'features_created': 'int',
        'features_replaced': 'int',
        'features_erased': 'int'
    }

    attribute_map = {
        'features_created': 'features_created',
        'features_replaced': 'features_replaced',
        'features_erased': 'features_erased'
    }

    def __init__(self, features_created=None, features_replaced=None, features_erased=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._features_created = None
        self._features_replaced = None
        self._features_erased = None
        self.discriminator = None
        if features_created is not None:
            self.features_created = features_created
        if features_replaced is not None:
            self.features_replaced = features_replaced
        if features_erased is not None:
            self.features_erased = features_erased

    @property
    def features_created(self):
        """Gets the features_created of this InlineResponse200.  # noqa: E501


        :return: The features_created of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._features_created

    @features_created.setter
    def features_created(self, features_created):
        """Sets the features_created of this InlineResponse200.


        :param features_created: The features_created of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._features_created = features_created

    @property
    def features_replaced(self):
        """Gets the features_replaced of this InlineResponse200.  # noqa: E501


        :return: The features_replaced of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._features_replaced

    @features_replaced.setter
    def features_replaced(self, features_replaced):
        """Sets the features_replaced of this InlineResponse200.


        :param features_replaced: The features_replaced of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._features_replaced = features_replaced

    @property
    def features_erased(self):
        """Gets the features_erased of this InlineResponse200.  # noqa: E501


        :return: The features_erased of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._features_erased

    @features_erased.setter
    def features_erased(self, features_erased):
        """Sets the features_erased of this InlineResponse200.


        :param features_erased: The features_erased of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._features_erased = features_erased

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
